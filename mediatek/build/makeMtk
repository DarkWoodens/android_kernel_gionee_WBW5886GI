#!/usr/bin/perl
# 
# Copyright Statement:
# --------------------
# This software is protected by Copyright and the information contained
# herein is confidential. The software may not be copied and the information
# contained herein may not be used or disclosed except with the written
# permission of MediaTek Inc. (C) 2010
# 
# BY OPENING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
# THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
# RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON
# AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
# NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
# SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
# SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK ONLY TO SUCH
# THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
# NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S
# SPECIFICATION OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
# 
# BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE
# LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
# AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
# OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY BUYER TO
# MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
# 
# THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE
# WITH THE LAWS OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF
# LAWS PRINCIPLES.  ANY DISPUTES, CONTROVERSIES OR CLAIMS ARISING THEREOF AND
# RELATED THERETO SHALL BE SETTLED BY ARBITRATION IN SAN FRANCISCO, CA, UNDER
# THE RULES OF THE INTERNATIONAL CHAMBER OF COMMERCE (ICC).
# 

my $DEBUG = 0; # enable/disable script debugging message

# Set environment variable for current Android version building
# such as, JDK version, arm-eabi version etc.
# If anymore, you can specify them in ./mbldenv.sh
setBuildEnvVars("./mbldenv.sh");
# End

$myCmd = "makeMtk"; #$0

#space check for build path
$result = `pwd`;
@number = split(" ",$result);
die "******************************************************************************  \
You are building in a directory whose absolute path contains a space character: \
$result \
Please move your source tree to a path that does not contain any spaces.        \
******************************************************************************  \
Directory names containing spaces not supported\n" if($#number != 0);

$performanceChk = 0;
($performanceChk == 1) && print &CurrTimeStr . " Enter $myCmd\n";

@chkDirs = qw(mediatek mediatek/config mediatek/build/tools);
foreach $m (@chkDirs)
{
  die "Folder \"$m\" does NOT exist!\nPlease help confirm Mediatek release package.\n" if (!-d $m);
}

@arguments = ();
my $product = "";
$project = "";

#JLZN: xuwen 20110602 added product macro begin
#JLZN: lvxp 20110618 modify for product macro, not project
$gionee_productID = "";
$productType = "";
#JLZN: xuwen 20110602 added end

$action = "";
@mOpts = ();
$ini = "makeMtk.ini";
$enINI = (-e $ini) ? 1 : 0;
(($#ARGV < 0) || (($#ARGV < 1) && (($enINI == 0) && (lc($ARGV[0]) !~ /^[listp|banyan_addon]/)))) && &Usage;

$tee = "FALSE";

# mapping table between flag in project name and corresponding product
my $products = 
{
  "phone"   => "phone",
  "ph"      => "phone",
  "tablet"  => "tablet",
  "tb"      => "tablet",
  "tv"      => "tv",
  "default" => "phone"
};

@actions = 
qw(
   new n bm_new remake r bm_remake clean c listproject listp
   drvgen codegen emigen nandgen custgen javaoptgen ptgen
   check-modem update-modem sign-image encrypt-image sign-modem check-dep
   dump-memusage gen-relkey check-appres
   rel-cust modem-info bindergen
  );

my @ABSNativeActions = 
qw(
   bootimage systemimage recoveryimage secroimage cacheimage factoryimage
   userdataimage userdataimage-nodeps target-files-package
   sdk win_sdk banyan_addon cts otapackage dist updatepackage
   update-api mm snod
  );

push(@actions, @ABSNativeActions);

@modules = qw(android uboot kernel dr ub k preloader pl);
@orgARGV = @ARGV;

while ($#ARGV != -1)
{
  if ($ARGV[0] =~ /^-(t|te|tee)/)
  {
    $tee = "TRUE";
  }
  elsif ($ARGV[0] =~ /^-h|help/) 
  {
    &Usage;
  }
  elsif ($ARGV[0] =~ /^-(o|op|opt)=(.*)$/)
  {
    @mOpts = split(",", $2);
    #Gionee: lingfen 20120726 add for CR00658060 start
    eval ("\$".$mOpts[0]);
    #Gionee: lingfen 20120726 add for CR00658060  end
  }
  elsif ($ARGV[0] =~ /^(listp|listproject)/)
  {
    &p_system("perl mediatek/build/tools/listP.pl");
    exit 0;
  }
  elsif ($ARGV[0] =~ /check-env|chk-env/)
  {
    &chkMustEnv;
    exit 0;
  } 
  else
  {
# Gionee LiRen modify for multi-project
    $gionee_productID = $ARGV[0];
    $ENV{"GIONEEPRODUCTID"} = $gionee_productID;

# Gionee Liren modify end

#Gionee:xuwen 20110608 modified for generic buiding start
    $projecttemp = lc($ARGV[0]);
    #JLZN:lvxp 20110712 add
    $project = $projecttemp;

    #Gionee:xuwen 20111013 added for CR00363046 begin
    $realLen = rindex($projecttemp,'_');
    $productType = lc(substr($projecttemp,-(length($projecttemp) - $realLen - 1)));
    #Gionee:xuwen 20111013 added for CR00363046 end

    #Gionee: lingfen 20120726 add for CR00658060 start
    $TARGET_BUILD_VARIANT=eng if($TARGET_BUILD_VARIANT eq "" );
    $ENV{TARGET_BUILD_VARIANT}=$TARGET_BUILD_VARIANT;
    #Gionee: lingfen 20120726 add for CR00658060 end

    if ($projecttemp ne "banyan_addon")
    {
      if (($projecttemp eq "platform") || ($projecttemp eq "generic") || ($projecttemp eq "emulator"))
      {
        $ENV{"BUILD_OPTIONS"} = "platform";
      }
      else
      {
          #Gionee:xuwen 20110910 added for start
          if (($productType eq "cta") || ($productType eq "platform"))
          {
              $ENV{"BUILD_OPTIONS"} = "platform";
          }
          #Gionee:xuwen 20110910 added end

        #JLZN:lvxp 20110712 modified
        #shift (@ARGV);
        $project = "gionee89_dwe_jb2";
      }
    }
    #JLZN:xuwen 20110608 modified end

    #JLZN:lvxp 20110712 delete
    #$project = lc($ARGV[0]);
    $project = "generic" if ($project eq "emulator");
    if (!-e "mediatek/config/${project}/ProjectConfig.mk")
    {
      if (-e $ini)
      {
        open (FILE_HANDLE, "<$ini") or die "cannot open $ini\n";
        while (<FILE_HANDLE>)
        {
          if (/^(\S+)\s*=\s*(\S+)/)
          {
            $keyname = $1;
            $${keyname} = $2;
          }
        }
        close FILE_HANDLE;
        $project = lc($project);
        die "Can NOT find project Makefile "
            . "mediatek/config/${project}/ProjectConfig.mk from $ini\n"
        if (!-e "mediatek/config/${project}/ProjectConfig.mk");
      }
    } 
    else
    {
#Gionee:xuwen 20110608 modified for generic buiding start
      if (($project ne "generic") && ($project ne "banyan_addon"))
      {
# Gionee LiRen modify for multi-project start
        die "Can NOT find project Makefile "
            . "gn_project/$gionee_productID.mk\n"
        if (!-e "gn_project/$gionee_productID.mk");
        unlink("mediatek/config/$project/ProjectConfig.mk") if (-e "mediatek/config/$project/ProjectConfig.mk");
        use File::Copy;
        copy("gn_project/$gionee_productID.mk", "mediatek/config/$project/ProjectConfig.mk");
# Gionee LiRen modify end
      }
#Gionee:xuwen 20110608 modified end

      shift(@ARGV);
    }

    die "Can NOT recognize project Makefile "
        . "mediatek/config/${project}/ProjectConfig.mk from command\n"
    if (!-e "mediatek/config/${project}/ProjectConfig.mk");
    $action = lc($ARGV[0]);
    shift(@ARGV);
    @arguments = @ARGV;
    @ARGV = ();
  }
  shift(@ARGV);
}

#Gionee lingfen 20120515 add for CR00600895 and CR00561462 start 
#foreach $prj ("mediatek/config/${project}/ProjectConfig.mk","mediatek/config/common/ProjectConfig.mk")
foreach $prj ("mediatek/config/common/ProjectConfig.mk","mediatek/config/${project}/ProjectConfig.mk")
{
  open (FILE_HANDLE, "<$prj") or die "cannot open $prj\n";
  while (<FILE_HANDLE>)
  {
    #if (/^(\S+)\s*=\s*(\S+)/)
    if (/^(\S+)\s*=\s*(.*)?\s*\n/)
    {
        my $keyname=$1;
        my $value=$2;
        $value =~ s/^\s+|\s+$//;
        $ENV{$keyname} = $value;
        #print "$keyname = $value\n";
    }
  }
  close FILE_HANDLE;
}
#Gionee lingfen 20120515 add for CR00600895 and CR00561462 end

if($project ne "banyan_addon") {
  die "Lack off the action.\nIt should be one of (@actions)\nOr try $myCmd -h\n" if ($action eq "");
}
#p_system("perl mediatek/build/tools/flavor_configuration.pl $project $ENV{\"CUSTOM_KERNEL_LCM\"}");
&writeINI;

my $flavor = "";
if ( $project =~ /\[(.*)\]/ )
{
  $flavor = $1;
  $project =~ s/\[(.*)\]//;
}

if ($project =~ /^(tablet)/ || $project =~ /_(ph|tb|tv|phone|tablet)$/)
{
  my $key = (defined $1)? $1 : "default";
  $product = $products->{$key};
}

@acts = split(",", $action);
foreach $uAct (@acts)
{
  $isFound = 0;
  foreach $sAct (@actions)
  {
    if ($uAct eq $sAct)
    {
      $isFound = 1;
      last;
    }
  }
  die "Unknown the action: $uAct.\nPlease use $myCmd -h, if you need help!\n" if ($isFound == 0);
  if (($uAct eq "bm_remake") || ($uAct eq "bm_new"))
  {
    $uAct =~ s/^bm_//;
    push(@mOpts, "-k");
  }
  if ($uAct eq "mm")
  {
    $MM_PATH = shift(@arguments);
    die "the given path does not exist!" if (! -d $MM_PATH);
    $snod = shift(@arguments) if ($#arguments == 0);
    die "the target behind mm must be snod, not $snod" if (($snod ne "") && ($snod ne "snod"));
  }
  ($uAct = "new") if ($uAct eq "n");
  ($uAct = "clean") if ($uAct eq "c");
  ($uAct = "remake") if ($uAct eq "r");  
}
#print "@acts\n";

my $signSubStr;
if ($action eq "gen-relkey")
{
  if ($#arguments >= 0)
  {
    die "Wrong command line arguments, do NOT set any more arguments after 'gen-relkey'.\n"
      . "Please try $myCmd -h for help message.\n";
  }
  else
  {
    # get signature input
    $signSubStr = inputSignSubject();
    print "\nYour signature subject is '$signSubStr'\n";
  }
}
else
{
  my $i = 0;
  if ($#arguments >= 0)
  {
    foreach $uMod (@arguments)
    {
      $isFound = 0;
      foreach $sMod (@modules)
      {
        if ($uMod eq $sMod)
        {
          $isFound = 1;
          last;
        }
      }
      die "Unknown the module: $uMod.\n"
        . "It should be one of (@modules)\nOr try $myCmd -h\n"
      if ( ($isFound == 0) && ($arguments[$i - 1] !~ /[k|kernel|dr|android]/) );
      ($uMod = "preloader") if ($uMod eq "pl");
      ($uMod = "uboot") if ($uMod eq "ub");
      ($uMod = "kernel") if ($uMod eq "k");  
      ($uMod = "android") if ($uMod eq "dr");
      if (($uMod eq "kernel") && ($arguments[$i + 1] =~ /^(.*)\//))
      {
        $KMOD_PATH = $arguments[$i + 1];

        if ($KMOD_PATH !~ /^kernel\//)
        {
          $KMOD_PATH = "../$KMOD_PATH";
        }
        else
        {
          $KMOD_PATH =~ s/^kernel\///;
        }
        last;
      }
      if ($uMod eq "android")
      {
        $DR_MODULE = $arguments[$i + 1];
        last;
      }
      $i += $i + 1;
    }
  }
  else
  {
    @default_arguments = qw(preloader uboot kernel android);
  }
}

#logdir should sync with Makefile.yusu
$ENV{"MTK_PROJECT"} = $project;
my $actPttn = join('|', @actions);
if (join(' ', @acts) =~ /($actPttn)/ || $project eq "banyan_addon")
{
  ($performanceChk == 1) && print &CurrTimeStr . " run pwd\n";
  chomp($mktopdir = `pwd`);
  ($performanceChk == 1) && print &CurrTimeStr . " finish pwd\n";
  
  push(@mOpts, "ENABLE_TEE=$tee");
  push(@mOpts, "PROJECT=$project");
  push(@mOpts, "FLAVOR=$flavor");
  push(@mOpts, "MKTOPDIR=$mktopdir");
  push(@mOpts, "PRODUCT=$product");

  if ($action ne "gen-relkey")
  {
    $logdir = "out/target/product";
    &p_system("mkdir -p $logdir") if (!-d $logdir);

    my $ABSActPttn = join('|',@ABSNativeActions);
    if (join(' ', @acts) =~ /($ABSActPttn)/)
    {
      foreach my $act (@acts)
      {
        &p_system("rm -f $logdir/${project}_${act}.log");
        &p_system("rm -f $logdir/${project}_${act}.log_err");
      }
    }
    if (join(' ', @acts) =~ /(new|remake|clean)/)
    {
      @create_arguments = ($#arguments < 0) ? @default_arguments : @arguments;
      foreach $uMod (@create_arguments)
      {
        #p_system("cat /dev/null > $logdir/${uMod}.log");
        &p_system("rm -f $logdir/${project}_${uMod}.log");
        &p_system("rm -f $logdir/${project}_${uMod}.log_err");
  #      &p_system("touch $logdir/${project}_${uMod}.log");
      }
      #Gione lingfen 20120410 add for CR00571845 start
      &p_system("rm -f $logdir/${project}*.log_err");
      #Gione lingfen 20120410 add for CR00571845 end
      #Gionee lingfen 2012014 add for CR00579607 start
      &p_system("rm -rf $logdir/gionee_backup") if(-d "$logdir/gionee_backup" );
      #Gionee lingfen 2012014 add for CR00579607 end
    }
  }
}

$cmdArg = "CMD_ARGU=\"@mOpts\"";
$makeCmd = "make -f mediatek/build/makemtk.mk $cmdArg @mOpts GN_PRODUCT=$gionee_productID";
#print "$makeCmd\n";

$result = 0;

# gen. release key/certificate
if ($action eq "gen-relkey")
{
  print "Start to generate release key/certificate for application signing...\n";
  $result += &p_system("$makeCmd $action SIGNATURE_SUBJECT=$signSubStr");
  (exit 255) if ($result >= 255);
  exit $result;
}

$result += &p_system("$makeCmd banyan_addon") if($#acts == -1 && $project eq "banyan_addon");

foreach $uAct (@acts)
{
  if (($uAct eq "codegen") || ($uAct eq "custgen"))
  {
    $result += &p_system("$makeCmd $uAct");
  }
  elsif ($uAct eq "mm")
  {
    $result += &p_system("$makeCmd $uAct SNOD=$snod MM_PATH=$MM_PATH");
    #Gionee lingfen 20120525 add for CR00608205 start
    exit $result;
    #Gionee lingfen 20120525 add for CR00608205 end
  }
  else
  {
    #Gionee:wangxin 20110630 add for version number of oversea department. begin
    if (exists $ENV{GN_OVERSEA_PRODUCT} && $ENV{GN_OVERSEA_PRODUCT} eq "yes")
    {
        print "begin oversea version.\n";
        $ENV{"GIONEEPROJECTID"} = substr($gionee_productID,0,7); 
        #Gionee:xuwen 20110719 modified for version number
        if (open(VERNUMBERFILE, "./gn_project/$ENV{GIONEEPROJECTID}_VerNumber")) 
        {
           $line = <VERNUMBERFILE>;
           if ($line =~ /^(\S+)\s*=\s*(\S+)/)
           {
              ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
			  $ENV{"MINI_VER_NUMBER"} = substr($2,0,5);
              $ENV{"GN_RELEASE_DIR"} = ${gionee_productID}."_T".substr($line,17,4);
              #GIONEE: luohui 2012-09-20 modify for CR00699369 oversea OTA start->
              #OTA look for version by GN_ZN_INTERNAL_VER_NUMBER
              #$ENV{"GN_ZN_INTERNAL_VER_NUMBER"} = "Release";
              $ENV{"GN_ZN_INTERNAL_VER_NUMBER"} = ${gionee_productID}."_".$ENV{MINI_VER_NUMBER};
              #GIONEE: luohui 2012-09-20 modify for CR00699369 oversea OTA end<-
              $ENV{"GN_INTERNAL_VER_NUMBER"} = ${gionee_productID}."_V".substr($ENV{MINI_VER_NUMBER},1,4);

              #Gionee:liss 2011-11-16 modified for CR00394322 start 
              #$ENV{"GN_EXTERNAL_VERNUMBER"} = ${gionee_productID}."_V".substr($ENV{MINI_VER_NUMBER},1,4);
              #Gionee:liss 2011-11-16 modified for CR00394322 end
 
              #GIONEE: dingwen 20120407 add for CR00564842 Oversea Verion number begin
              $ENV{"GN_OVERSEA_EXTERNAL_VERNUMBER"} = ${gionee_productID}."_V".substr($ENV{MINI_VER_NUMBER},1,4);
              #GIONEE: dingwen 20120407 add for CR00564842 Oversea Verion number end
           }
        }
        else
        {
           #Gionee:xuwen 20110719 modified for version number
           die "*********** CAN NOT Open gn_project/$ENV{GIONEEPROJECTID}_VerNumber\n";
        }
        close VERNUMBERFILE;
    #Gionee:wangxin 20110630 add for version number of oversea department. end
    }
    elsif (isCdmaBuild())
    {
      $ENV{"GIONEEPROJECTID"} = substr($gionee_productID,0,6);
      parseCdmaVersionFile("./gn_project/$ENV{GIONEEPROJECTID}_VerNumber");
    }
    else
    {
  #Gionee:lvxp 20110620 add for version number begin
      $ENV{"GIONEEPROJECTID"} = substr($gionee_productID,0,6);

      #Gionee:xuwen 20110930 added for version number begin
      if ($gionee_productID =~ /^W/ || $gionee_productID =~ /^C/)
      {
        $ENV{"GIONEEPROJECTID"} = substr($gionee_productID,0,7);
      }
      #Gionee:xuwen 20110930 added end

      #Gionee:xuwen 20110719 modified for version number
      if (open(VERNUMBERFILE, "./gn_project/$ENV{GIONEEPROJECTID}_VerNumber")) 
      {
          #Gionee:lingfen 20120530 add for CR00611891 start
          $line = <VERNUMBERFILE>;
          @gn_vernumber=split(/[=;]/,$line);
          $ENV{"MINI_VER_NUMBER"} = $gn_vernumber[1];
          $ENV{"GN_ZN_INTERNAL_VER_NUMBER"} = ${gionee_productID}."_".$ENV{MINI_VER_NUMBER};
          @gn_productid=split("_",$gionee_productID);
          $ENV{"GN_INTERNAL_VER_NUMBER"} = $ENV{GN_EXTERNAL_MODEL} . "-GN" . substr($gn_productid[0],0,7) . "-T" . $ENV{GN_RO_GN_GNVERNUMBERREL} . "-" . $gn_productid[1];
          #Gionee:lingfen 20120530 add for CR00611891 end
      }
      else
      {
        #Gionee:xuwen 20110719 modified for version number
        die "*********** CAN NOT Open gn_project/$ENV{GIONEEPROJECTID}_VerNumber\n";
      }
      close VERNUMBERFILE;
  #Gionee:lvxp 20110620 add for version number end
    }
    if ($#arguments < 0)
    {
      if (${uAct} =~ /(new|remake|clean)/)
      {
        if ($uAct =~ /(new|remake)/)
        {
          &chkMustEnv;
          &chkDep;
        }

        #Gionee:xuwen 20110607 added for excuting the gn_prebuild.sh begin
        if ($uAct eq "new")
        {
          if ($project ne "banyan_addon")
          {
            &p_system("bash gn_project/tools/gn_prebuild.sh mtk 4.2");
          }
        }
        #Gionee:xuwen 20110607 added end

        $result += &p_system("$makeCmd ${uAct}all");
        
        #Gionee: lingfen 20120731 add for CR00659167  start
        if( -d "out/target/product/$project/tcard" && $ENV{GN_3RD_RECOVER_FROM_SDCARD} eq "yes" ){
            system("./gn_project/tools/gn_create_3rd_zip.sh");
        }
        #Gionee: lingfen 20120731 add for CR00659167 end

      }
      else
      {
        $result += &p_system("$makeCmd $uAct CUR_MODULE=android");
      }
    }
    else
    {
      foreach $uMod (@arguments)
      {
        &chkDep("$uMod");
        if ( ($KMOD_PATH ne "") && ($uMod eq "kernel") )
        {
          $result += &p_system("$makeCmd $uAct CUR_MODULE=$uMod KMOD_PATH=$KMOD_PATH");
          last;
        }
        elsif ( ($DR_MODULE ne "") && ($uMod eq "android") )
        {
          $result += &p_system("$makeCmd $uAct CUR_MODULE=$uMod DR_MODULE=$DR_MODULE");
          last;
        }
        else
        {
          $result += &p_system("$makeCmd $uAct CUR_MODULE=$uMod");
        }
      }
    }
  }
}  

($performanceChk == 1) && print &CurrTimeStr . " write ini\n";

($performanceChk == 1) && print &CurrTimeStr . " Exit $myCmd\n";

#JLZN:xuwen 20110601 added for coping the built files into release dir begin
if (($project ne "generic") && ($project ne "banyan_addon"))
{
  #Gionee:linansong 20110823 add for oversea version
  if ((exists $ENV{GN_OVERSEA_PRODUCT} && $ENV{GN_OVERSEA_PRODUCT} eq "yes") ||
      isCdmaBuild())
  {
    $releasedir = "$mktopdir/release/$ENV{GN_RELEASE_DIR}";
  }
  else
  {
    #Gionee:lvxp 20110620 add for version number
    $releasedir = "$mktopdir/release/$ENV{GN_ZN_INTERNAL_VER_NUMBER}";
  }
  #Gionee:linansong 20110823 end

  if (-e $releasedir)
  {
    &p_system("rm -rf $releasedir");
  }

  &p_system("ls $logdir/*.log_err > /dev/null 2>&1 || mkdir -p $releasedir");

  #Gionee lingfen 20120417 add for CR00579607 start 
  &p_system("mkdir -p $logdir/gionee_backup") if( ! -d "$logdir/gionee_backup");
  &p_system("cp -r $logdir/${project}/symbols $logdir/gionee_backup") if( -d "$logdir/${project}/symbols");
  #Gionee taochao 20130105 add for CR00755436 start 
  &p_system("cp kernel/out/vmlinux $logdir/gionee_backup/symbols") if( -e "kernel/out/vmlinux");
  #Gionee taochao 20130105 add for CR00755436 end 
  #Gionee lingfen 20120417 add for CR00579607 end

  #Gionee: lingfen 20120731 add for CR00659167  start
  if( -e "$logdir/${project}/tcard/.gn_apps.zip" && $ENV{GN_3RD_RECOVER_FROM_SDCARD} eq "yes"){
      &p_system("mkdir -p ./mediatek/build/tools/ptgen/$ENV{MTK_PLATFORM}/gn_resource/");
      &p_system("cp $logdir/${project}/tcard/.gn_apps.zip ./mediatek/build/tools/ptgen/$ENV{MTK_PLATFORM}/gn_resource/");
  }
  #Gionee: lingfen 20120731 add for CR00659167  end

  #gionee:yangqb 20120609 add for generating fat img begin
  #Gionee:lingfen 20120629 add for CR00632604 start
  if ($ENV{USER} =~ /^znsj_bianyi[2-5]$/ || $ENV{USER} =~ /^znsj$/ || $ENV{USER} =~ /^android$/ || $ENV{USER} =~ /^cdma-server$/){
      &p_system("sudo bash ./mediatek/build/tools/ptgen/$ENV{MTK_PLATFORM}/gen_fat.sh $ENV{MTK_PLATFORM} ${gionee_productID}") if (-e "./mediatek/build/tools/ptgen/$ENV{MTK_PLATFORM}/gen_fat.sh");
  }
  &p_system("cp -r ./mediatek/build/tools/ptgen/$ENV{MTK_PLATFORM}/*.img $logdir/${project}/");
  #Gionee:lingfen 20120629 add for CR00632604 end
  #gionee:yangqb 20120609  add for generating fat img end

  if (-e $releasedir)
  {
    &p_system("cp $logdir/${project}/DSP_BL $releasedir");
    &p_system("cp $logdir/${project}/*.img $releasedir");
    &p_system("cp $logdir/${project}/*.bin $releasedir");
    &p_system("cp $logdir/${project}/*.txt $releasedir");

    #Gionee:xufei 20120215 add for 65x5 emmc start
    &p_system("cp $logdir/${project}/EBR1 $releasedir");
    &p_system("cp $logdir/${project}/EBR2 $releasedir");
    &p_system("cp $logdir/${project}/MBR $releasedir");
    #Gionee:xufei 20120215 add for 65x5 emmc end

    #Gionee: lingfen 2014-04-23 modify for CR00801289 start
    &p_system("cp mediatek/cgen/APDB* $releasedir");
    foreach $custom_modem (split(/\s+/,$ENV{CUSTOM_MODEM})){
        &p_system("cp mediatek/custom/common/modem/$custom_modem/BPLGUInfoCustomApp* $releasedir");
    }
    #Gionee: lingfen 2014-04-23 modify for CR00801289 end

    #Gionee:lingfen 20120601 add for ota inc start
    if(grep(/otapackage/,@acts)){
        #Gionee:lingfen 20120725 modify for ota build 
        $releasedir_ota="$mktopdir/release/$ENV{GIONEEPRODUCTID}_$ENV{MINI_VER_NUMBER}_OTA";
        &p_system("mkdir -p $releasedir_ota");
        &p_system("mkdir -p $releasedir_ota/tmp");
        &p_system("mkdir -p $releasedir_ota/ota");
        &p_system("cp $logdir/${project}/*.img $releasedir");

        $gn_build_display_id = join("-",split("_",$ENV{GN_BUILD_DISPLAY_ID}));
        #$gineeproductid = join("-",split("_",$ENV{GIONEEPRODUCTID}));
        #$mini_ver_number = join("-",split("_",$ENV{MINI_VER_NUMBER}));

        &p_system("cp $logdir/${project}/${project}-ota-*$ENV{USER}.zip $releasedir_ota/ota/$ENV{GIONEEPRODUCTID}_update_${gn_build_display_id}_$ENV{MINI_VER_NUMBER}.zip");
        &p_system("cp $logdir/${project}/obj/PACKAGING/target_files_intermediates/${project}-target_files-*$ENV{USER}.zip $releasedir_ota/tmp/$ENV{GIONEEPRODUCTID}_update_${gn_build_display_id}_$ENV{MINI_VER_NUMBER}_tmp.zip");
    }
    #Gionee:lingfen 20120601 add for ota inc end
  }
}
#JLZN:xuwen 20110601 added end

(exit 255) if ($result >= 255);
exit $result;

#Gionee:xuwen 20120308 added for cdma start
sub isCdmaBuild
{
  return ($ENV{GN_CDMA_VERSION} eq "yes");
}

sub parseCdmaVersionFile
{
  my ($line, $key, $value);
  my ($pcb, $sw_ver);

  my $filename = shift;
  open(FILE, $filename) || die "Could not read from $filename.\n";

  while(<FILE>) 
  {
    $line=$_;
    chomp ($line);
    # Remove spaces at the start of the line
    $line =~ s/^\s*//; 
    # Remove spaces at the end of the line
    $line =~ s/\s*$//;
    if(($line !~ /^#/) && ($line ne ""))
    {    
      ($key, $value) = split (/=/, $line);          
      $key =~ s/^\s*//;
      $key =~ s/\s*$//;
      $value =~ s/^\s*//;
      $value =~ s/\s*$//;
      if ($key eq "PCB_NUMBER") {
        $pcb = $value;
      }
      if ($key eq "SW_VER_NUMBER") {
        $sw_ver = $value;
      }
    }
  }

  close(FILE);
  $ENV{"GN_RELEASE_DIR"} = ${gionee_productID}.$pcb."_".$sw_ver;
}
#Gionee:xuwen 20120308 added end

sub CurrTimeStr
{
  my($sec, $min, $hour, $mday, $mon, $year) = localtime(time);
  return (sprintf "%4.4d/%2.2d/%2.2d %2.2d:%2.2d:%2.2d", $year+1900, $mon+1, $mday, $hour, $min, $sec);
}

sub Usage
{
  warn << "__END_OF_USAGE";
Usage: (makeMtk|mk) [options] project actions [modules]

Options:
  -t, -tee      : Print log information on the standard-out.
  -o, -opt=bypass_argument_to_make
                : Pass extra arguments to make.

  -h, -help     : Print this message and exit.

Projects:
  one of available projects.

Actions:
  listp, listproject
                : List all available projects.

  check-env     : Check if build environment is ready.
  check-dep     : Check feature dependency.
  n, new        : Clean and perform a full build.
  c, clean      : Clean the immediate files(such as, objects, libraries etc.).
  r, remake     : Rebuild(target will be updated if any dependency updats).
  bm_new        : "new" + GNU make's "-k"(keep going when encounter error) feature.
  bm_remake     : "remake" + GNU make's "-k"(keep going when encounter error) feature.
  mm            : Build module through Android native command "mm"

  emigen        : Generate EMI setting source code.
  nandgen       : Generate supported NAND flash device list.
  codegen       : Generate trace DB(for META/Cather etc. tools used).
  drvgen        : Generate driver customization source.
  custgen       : Generate customization source.
  javaoptgen    : Generate the global java options.
  ptgen         : Generate partition setting header & scatter file.
  bindergen     : Generate binder related information

  sign-image    : Sign all the image generated.
  encrypt-image : Encrypt all the image generated.
  update-api    : Android default build action
                  (be executed if system setting or anything removed from API).
  check-modem   : Check modem image consistency.
  update-modem  : Update modem image located in system.img.
  modem-info    : Show modem version
  gen-relkey    : Generate releasekey for application signing.
  check-appres  : Check unused application resource.

  sdk           : Build sdk package.
  win_sdk       : Build sdk package with a few Windows tools.
  banyan_addon  : Build MTK sdk addon.
  cts           : Build cts package.
  bootimage     : Build boot image(boot.img).
  cacheimage    : Build cache image(cache.img).
  systemimage   : Build system image(system.img).
  snod          : Build system image without dependency.
                  (that is, ONLY pack the system image, NOT checking its dependencies.)
  recoveryimage : Build recovery image(recovery.img).
  secroimage    : Build secro image(secro.img).
  factoryimage  : Build factory image(factory.img).
  userdataimage : Build userdata image(userdata.img).
  userdataimage-nodeps
                : Build userdata image without dependency.
                  (that is, ONLY pack the userdata image, NOT checking its dependencies.)
  target-files-package
                : Build the target files package.
                  (A zip of the directories that map to the target filesystem.
                   This zip can be used to create an OTA package or filesystem image
                   as a post-build step.)
  updatepackage : Build the update package.
  dist          : Build distribution package.

Modules:
  pl, preloader : Specify to build preloader.
  ub, uboot     : Specify to build uboot.
  k,  kernel    : Specify to build kernel.
  dr, android   : Specify to build android.
  NULL          : Specify to build all components/modules in default.
  k <module path>
                : Specify to build kernel component/module with the source path.
  dr <module name>
                : Specify to build android component/module with module name.

Example:
  ./mk -t e1k emigen
                : Generate EMI setting source code.
  ./mk -o=TARGET_BUILD_VARIANT=user e1k n
                : Start a user mode full build.
  ./mk listp    : List all available projects.
  ./mk e1k bootimage
                : Build bootimage for e1k project.
  ./mk e1k bm_new k
                : Build kernel for e1k project.
  ./makeMtk e1k c,bm_remake ub k
                : Clean & Build uboot and kernel for e1k project. 
  ./makeMtk e1k n k kernel/xxx/xxx
                : Build(full build) kernel component/module 
                  under the path "kernel/xxx/xxx" for e1k project.
  ./makeMtk e1k r dr Gallery
                : Rebuild android module named Gallery for e1k project.
  ./makeMtk e1k mm packages/apps/Settings
    : Change Directory to packages/apps/Settings and execute "mm"


__END_OF_USAGE

  exit 1;
}

sub writeINI
{
  @iniFields = qw(project);
 
  open (FILE_HANDLE, ">$ini") or die "cannot open $ini\n";
  foreach $m (@iniFields)
  {
    $value = $${m};
    print FILE_HANDLE "$m = $value\n";
  }
  close FILE_HANDLE;
}

sub p_system
{
  my ($cmd) = @_;
  my ($debugp) = 0;
  my $result;
  ($debugp != 0) && print("$cmd\n");
  ($performanceChk == 1) && print &CurrTimeStr . " system $cmd\n";
  $result = system("$cmd");
  ($performanceChk == 1) && print &CurrTimeStr . " exit $cmd\n";
  return $result;
}

sub chkMustEnv
{
  my $result;
  print "\n**********checking Env************\n";
  &p_system("chmod 755 mediatek/build/tools/checkEnv.py");
  $result = &p_system("python mediatek/build/tools/checkEnv.py -a >checkenv.log 2>&1");
  if ($result == 0)
  {
    print " Your building environment is OK\n"
          . " The detail information is in \"checkenv.log\"!\n"
          . "*************************************************\n";
  }
  else
  {
    print "Please check your building environment First!\n\n";
    if ($tee eq "TRUE")
    {
      system("cat checkenv.log");
    }
    else
    {
      open FILE, "<checkenv.log";
      while(<FILE>)
      {
        print if(/FAIL|WARNING/);
      }
      close(FILE);
    }
    die "\n The detail information is in \"checkenv.log\"!\n"
        . "***********************************************\n";
  }
}
sub chkDep
{
  my $module = $_[0];
  my $string = $module;
  if (!$module)
  {
    $string = all;
  }
#  print "*********************************\n \"$string\" Dependency Checking...\n";
  my $result;
  $result = &p_system("CUR_MODULE=$module make -f mediatek/build/makemtk.mk check-dep $cmdArg @mOpts > $logdir/${project}_check-dep.log 2>&1");
  &p_system("cat $logdir/${project}_check-dep.log");
  if ($result)
  {
    &p_system("cp -f $logdir/${project}_check-dep.log $logdir/${project}_check-dep.log_err");
    die "Please check all dependency error First !!";
  }
}

sub setBuildEnvVars
{
  my $bldProfile = shift;
  die "\"$bldProfile\" does NOT exist!\n" if (!-e $bldProfile);
  # Todo: error handling for '. $bldProfile' command
  my $envVarList = `. $bldProfile && env | grep ".*=.*"`;
  map
    {
      chomp;
      $ENV{$1}=$2 if (/(.*)=(.*)/);
    } split(/\n/, $envVarList);

  if ($DEBUG)
  {
    print "[START LOGGING]: Current build environment variables setting...\n";
    print "PATH=$ENV{PATH}\n";
    print "ANDROID_JAVA_HOME=$ENV{ANDROID_JAVA_HOME}\n";
    print "JAVA_HOME=$ENV{JAVA_HOME}\n";
    print "PYTHONPATH=$ENV{PYTHONPATH}\n";
    print "[END LOGGING]\n";
  }
}

# interactive mode for inputting signature subject
sub inputSignSubject
{
  my $signature =
     {
       '0-C'            => ['C', '', 'Country Name (2 letter code)'],
       '1-ST'           => ['ST', '', 'State or Province Name (full name)'],
       '2-L'            => ['L', '', 'Locality Name (eg, city)'],
       '3-O'            => ['O', '', 'Organization Name (eg, company)'],
       '4-OU'           => ['OU', '', 'Organizational Unit Name (eg, section)'],
       '5-CN'           => ['CN', '', 'Common Name (eg, your name or your server hostname)'],
       '6-emailAddress' => ['emailAddress', '', 'Contact email address']
     };

  my $subjectStr = "";
  print "Please enter the signature subject as follows.\n";

  foreach my $k (sort keys %$signature)
  {
    while (1)
    {
      if (!$signature->{$k}[1])
      {
        # print promote message
        print "$signature->{$k}[2]: ";
        $signature->{$k}[1] = <STDIN>;
        chomp $signature->{$k}[1];
        if ($signature->{$k}[1])
        {
          $subjectStr .= "/$signature->{$k}[0]=$signature->{$k}[1]";
          last;
        }
      }
    }
  }

  return $subjectStr;
}

